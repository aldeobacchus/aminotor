openapi: 3.0.3
info:
  title: Customized API - OpenAPI 3.0
  description: |-
    This is a customized OpenAPI 3.0 specification for a Q&A system with user management. You can find out more about Swagger at [https://swagger.io](https://swagger.io).

    Some useful links:
    - [GitHub Repository](https://github.com/yourrepository)
  termsOfService: http://swagger.io/terms/
  contact:
    email: your@email.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
- url: http://localhost:8080
tags:
- name: user
  description: Operations about user
- name: questions
  description: Operations related to questions
- name: answers
  description: Operations related to answers
paths:
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: create_user
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
      x-openapi-router-controller: swagger_server.controllers.user_controller
  /questions:
    put:
      tags:
      - questions
      summary: Update a question
      description: Update an existing question by ID
      operationId: update_question
      requestBody:
        description: Update an existing question
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
        "400":
          description: Invalid ID supplied
        "404":
          description: Question not found
      x-openapi-router-controller: swagger_server.controllers.questions_controller
  /answers:
    get:
      tags:
      - answers
      summary: Get answers
      description: Retrieve answers for a specific question
      operationId: get_answers
      parameters:
      - name: questionId
        in: query
        description: ID of the question to retrieve answers for
        required: true
        style: form
        explode: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Answer'
                x-content-type: application/json
        "400":
          description: Invalid question ID
      x-openapi-router-controller: swagger_server.controllers.answers_controller
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: "12345"
        phone:
          type: string
          example: "12345"
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      example:
        firstName: John
        lastName: James
        password: "12345"
        userStatus: 1
        phone: "12345"
        id: 10
        email: john@email.com
        username: theUser
      xml:
        name: user

